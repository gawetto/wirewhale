name: release
on:
  push:
    tags:
    - "[0-9]+.[0-9]+.[0-9]+"
jobs:
  create-release:
    name: create-release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.release.outputs.upload_url }}
      tag: ${{ env.TAG }}
    steps:
      - name: Get the release version from the tag
        shell: bash
        run: |
          echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
      - name: Create GitHub release
        id: release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.TAG }}
          release_name: ${{ env.TAG }}

  build-upload:
    needs: [create-release]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v1
      # https://github.com/actions/cache/blob/master/examples.md#rust---cargo
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ runner.os }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ runner.os }}-cargo-index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ runner.os }}-cargo-build-target-${{ hashFiles('**/Cargo.lock') }}
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1.0.1
        with:
          command: build
          args: --release --target=${{ matrix.target }}
          use-cross: true
      - shell: bash
        run: |
          staging="wirewhale-${{ needs.create-release.outputs.tag }}-${{ matrix.target }}"
          mkdir $staging
          if [ "${{ matrix.os }}" = "windows-latest" ]; then
            cp target/${{matrix.target}}/release/wirewhale.exe $staging/wirewhale.exe
            powershell Compress-Archive -Path $staging -DestinationPath $staging.zip
            echo "ASSET_PATH=$staging.zip" >> $GITHUB_ENV
            echo "ASSET_NAME=$staging.zip" >> $GITHUB_ENV
          else
            cp target/${{matrix.target}}/release/wirewhale $staging/wirewhale
            strip "$staging/wirewhale"
            tar czf "$staging.tar.gz" "$staging"
            echo "ASSET_PATH=$staging.tar.gz" >> $GITHUB_ENV
            echo "ASSET_NAME=$staging.tar.gz" >> $GITHUB_ENV
          fi
      - name: Upload release archive
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream
